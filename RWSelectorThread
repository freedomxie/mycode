import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * @author freedom.xie
 * @description 读写选择器
 */
 final class RWSelectorThread<T extends Client<?>> extends Thread {

	protected static final Logger _log = Logger.getLogger(Connection.class.getName());
	// 默认字节顺序
	private static final ByteOrder BYTE_ORDER = ByteOrder.LITTLE_ENDIAN;
	// 默认头长度
	private static final int HEADER_SIZE = 2;
	// NIO Selector
	private final Selector _selector;
	// 实现
	private final IPacketHandler<T> _packetHandler;
	private final IExecutor<T> _executor;
	// 配置
	private final int HELPER_BUFFER_SIZE;
	private final int HELPER_BUFFER_COUNT;
	private final int MAX_SEND_PER_PASS;
	private final int SLEEP_TIME;
	public boolean TCP_NODELAY;
	// Main Buffers
	private final ByteBuffer DIRECT_WRITE_BUFFER;
	private final ByteBuffer WRITE_BUFFER;
	private final ByteBuffer READ_BUFFER;
	// ByteBuffers General Purpose Pool
	private final NetStackList<ByteBuffer> _bufferPool;
	// Pending Close
	private final NetStackList<Connection<T>> _pendingClose;
	private boolean _shutdown;

	public RWSelectorThread(final IExecutor<T> executor, final IPacketHandler<T> packetHandler) throws IOException {
		super.setName("RWSelector-" + super.getId());

		this.HELPER_BUFFER_SIZE = SelectorConfig.HELPER_BUFFER_SIZE;
		this.HELPER_BUFFER_COUNT = SelectorConfig.HELPER_BUFFER_COUNT;
		this.MAX_SEND_PER_PASS = SelectorConfig.MAX_SEND_PER_PASS;
		this.TCP_NODELAY = SelectorConfig.TCP_NODELAY;
		this.SLEEP_TIME = SelectorConfig.SLEEP_TIME;

		this.DIRECT_WRITE_BUFFER = ByteBuffer.allocateDirect(SelectorConfig.WRITE_BUFFER_SIZE).order(BYTE_ORDER);
		this.WRITE_BUFFER = ByteBuffer.wrap(new byte[SelectorConfig.WRITE_BUFFER_SIZE]).order(BYTE_ORDER);
		this.READ_BUFFER = ByteBuffer.wrap(new byte[SelectorConfig.READ_BUFFER_SIZE]).order(BYTE_ORDER);

		this._pendingClose = new NetStackList<Connection<T>>();
		this._bufferPool = new NetStackList<ByteBuffer>();

		for (int i = 0; i < this.HELPER_BUFFER_COUNT; i++) {
			this._bufferPool.addLast(ByteBuffer.wrap(new byte[this.HELPER_BUFFER_SIZE]).order(BYTE_ORDER));
		}

		this._packetHandler = packetHandler;
		this._executor = executor;
		this._selector = Selector.open();

	}

	final Selector getSelector() {
		return this._selector;
	}

	final ByteBuffer getPooledBuffer() {
		if (this._bufferPool.isEmpty()) {
			return ByteBuffer.wrap(new byte[this.HELPER_BUFFER_SIZE]).order(BYTE_ORDER);
		}
		return this._bufferPool.removeFirst();
	}

	final void recycleBuffer(final ByteBuffer buf) {
		if (this._bufferPool.size() < this.HELPER_BUFFER_COUNT) {
			buf.clear();
			_bufferPool.addLast(buf);
		}
	}

	@SuppressWarnings("unchecked")
	@Override
	public final void run() {
		int selectedKeysCount = 0;

		SelectionKey key;
		Connection<T> con;

		Iterator<SelectionKey> selectedKeys;

		while (!_shutdown) {
			try {
				selectedKeysCount = _selector.selectNow();
			} catch (IOException e) {
				// _log.log(Level.SEVERE,"ignore", e);
			}

			if (selectedKeysCount > 0) {
				selectedKeys = _selector.selectedKeys().iterator();
				while (selectedKeys.hasNext()) {
					key = selectedKeys.next();
					selectedKeys.remove();
					con = (Connection<T>) key.attachment();
					try {
						switch (key.readyOps()) {
						case SelectionKey.OP_READ:
							readPacket(key, con);
							break;
						case SelectionKey.OP_WRITE:
							writePacket(key, con);
							break;
						case SelectionKey.OP_READ | SelectionKey.OP_WRITE:
							writePacket(key, con);
							if (key.isValid()) {
								readPacket(key, con);
							}
							break;
						}
					} catch (Exception ex) {
						// _log.log(Level.SEVERE,"ignore", ex);
					}
				}
			}

			synchronized (_pendingClose) {
				while (!_pendingClose.isEmpty()) {
					try {
						con = _pendingClose.removeFirst();
						writeClosePacket(con);
						closeConnectionImpl(con.getSelectionKey(), con);
					} catch (Exception e) {
						e.printStackTrace();
						_log.log(Level.SEVERE, "ignore", e);
					}
				}
			}

			try {
				Thread.sleep(this.SLEEP_TIME);
			} catch (InterruptedException ex) {
				// _log.log(Level.SEVERE,"ignore", ex);
			}
		}
	}

	private final void readPacket(final SelectionKey key, final Connection<T> con) {
		if (!con.isClosed()) {
			ByteBuffer buf;
			if ((buf = con.getReadBuffer()) == null) {
				buf = READ_BUFFER;
			}

			// if we try to to do a read with no space in the buffer it will
			// read 0 bytes
			// going into infinite loop
			if (buf.position() == buf.limit()) {
				System.exit(0);
			}

			int result = -2;

			try {
				result = con.read(buf);
			} catch (IOException e) {
				//e.printStackTrace();
				// _log.log(Level.SEVERE,"error handling goes below", e);
			}

			if (result > 0) {
				buf.flip();
				final T client = con.getClient();
				while (tryReadPacket(key, client, buf, con)) {
					// do nothing
				}
			} else {
				switch (result) {
				case 0:
				case -1:
					closeConnectionImpl(key, con);
					break;
				case -2:
					con.getClient().onForcedDisconnection();
					closeConnectionImpl(key, con);
					break;
				}
			}
		}
	}

	private final boolean tryReadPacket(final SelectionKey key, final T client, final ByteBuffer buf, final Connection<T> con) {
		switch (buf.remaining()) {
		case 0:
			// buffer is full
			// nothing to read
			return false;
		case 1:
			// we don`t have enough data for header so we need to read
			key.interestOps(key.interestOps() | SelectionKey.OP_READ);
			// did we use the READ_BUFFER ?
			if (buf == READ_BUFFER) {
				// move the pending byte to the connections READ_BUFFER
				allocateReadBuffer(con);
			} else {
				// move the first byte to the beginning :)
				buf.compact();
			}
			return false;
		default:
			// data size excluding header size :
			final int dataPending = (buf.getShort() & 0xFFFF);
			if (dataPending > buf.remaining()) {
				key.interestOps(key.interestOps() | SelectionKey.OP_READ);
				buf.position(buf.position() - HEADER_SIZE);
				if (buf == READ_BUFFER) {
					allocateReadBuffer(con);
				} else {
					buf.compact();
				}
				return false;
			} else {
				// avoid parsing dummy packets (packets without body)
				if (dataPending > 0) {
					final int pos = buf.position();
					parseClientPacket(pos, buf, dataPending, client);
					buf.position(pos + dataPending);
				}

				// if we are done with this buffer
				if (!buf.hasRemaining()) {
					if (buf != READ_BUFFER) {
						con.setReadBuffer(null);
						recycleBuffer(buf);
					} else {
						READ_BUFFER.clear();
					}
					return false;
				}
				return true;
			}
		}
	}

	private final void allocateReadBuffer(final Connection<T> con) {
		con.setReadBuffer(getPooledBuffer().put(READ_BUFFER));
		READ_BUFFER.clear();
	}

	private final void parseClientPacket(final int pos, final ByteBuffer buf, final int dataSize, final T client) {
		final boolean ret = client.decrypt(buf, dataSize);

		if (ret && buf.hasRemaining()) {
			// apply limit
			final int limit = buf.limit();
			buf.limit(pos + dataSize);
			final ReceivablePacket<T> cp = _packetHandler.handlePacket(buf, client);

			if (cp != null) {
				cp._buf = buf;
				cp._client = client;

				if (cp.read()) {
					_executor.execute(cp);
				}
				cp._buf = null;
			}
			buf.limit(limit);
		}
	}

	private final void writeClosePacket(final Connection<T> con) {
		SendablePacket<T> sp;
		synchronized (con.getSendQueue()) {
			if (con.getSendQueue().isEmpty()) {
				return;
			}

			while ((sp = con.getSendQueue().removeFirst()) != null) {
				WRITE_BUFFER.clear();

				putPacketIntoWriteBuffer(con.getClient(), sp);

				WRITE_BUFFER.flip();

				try {
					con.write(WRITE_BUFFER);
				} catch (IOException e) {
					_log.log(Level.SEVERE, "error handling goes on the if below", e);
				}
			}
		}
	}

	protected final void writePacket(final SelectionKey key, final Connection<T> con) {
		if (!prepareWriteBuffer(con)) {
			key.interestOps(key.interestOps() & ~SelectionKey.OP_WRITE);
			return;
		}
		DIRECT_WRITE_BUFFER.flip();
		final int size = DIRECT_WRITE_BUFFER.remaining();
		int result = -1;

		try {
			result = con.write(DIRECT_WRITE_BUFFER);
		} catch (IOException e) {
			// _log.log(Level.SEVERE,"error handling goes on the if below", e);
		}

		// check if no error happened
		if (result >= 0) {
			// check if we written everything
			if (result == size) {
				// complete write
				synchronized (con.getSendQueue()) {
					if (con.getSendQueue().isEmpty() && !con.hasPendingWriteBuffer()) {
						key.interestOps(key.interestOps() & ~SelectionKey.OP_WRITE);
					}
				}
			} else {
				// incomplete write
				con.createWriteBuffer(DIRECT_WRITE_BUFFER);
			}
		} else {
			con.getClient().onForcedDisconnection();
			closeConnectionImpl(key, con);
		}
	}

	private final boolean prepareWriteBuffer(final Connection<T> con) {
		boolean hasPending = false;
		DIRECT_WRITE_BUFFER.clear();

		// if there is pending content add it
		if (con.hasPendingWriteBuffer()) {
			con.movePendingWriteBufferTo(DIRECT_WRITE_BUFFER);
			hasPending = true;
		}

		if ((DIRECT_WRITE_BUFFER.remaining() > 1) && !con.hasPendingWriteBuffer()) {
			final NetStackList<SendablePacket<T>> sendQueue = con.getSendQueue();
			final T client = con.getClient();
			SendablePacket<T> sp;

			for (int i = 0; i < MAX_SEND_PER_PASS; i++) {
				synchronized (con.getSendQueue()) {
					if (sendQueue.isEmpty()) {
						sp = null;
					} else {
						sp = sendQueue.removeFirst();
					}
				}

				if (sp == null) {
					break;
				}

				hasPending = true;

				// put into WriteBuffer
				putPacketIntoWriteBuffer(client, sp);

				WRITE_BUFFER.flip();

				if (DIRECT_WRITE_BUFFER.remaining() >= WRITE_BUFFER.limit()) {
					DIRECT_WRITE_BUFFER.put(WRITE_BUFFER);
				} else {
					con.createWriteBuffer(WRITE_BUFFER);
					break;
				}
			}
		}
		return hasPending;
	}


	private final void putPacketIntoWriteBuffer(final T client, final SendablePacket<T> sp) {
		WRITE_BUFFER.clear();

		// reserve space for the size
		final int headerPos = WRITE_BUFFER.position();
		final int dataPos = headerPos + HEADER_SIZE;
		WRITE_BUFFER.position(dataPos);

		// set the write buffer
		sp._buf = WRITE_BUFFER;
		
		// write content to buffer
		sp.write();
		
		// delete the write buffer
		sp._buf = null;

		// size (inclusive header)
		int dataSize = WRITE_BUFFER.position() - dataPos;

		// WRITE_BUFFER.position(dataPos);
		client.encrypt(WRITE_BUFFER, dataSize);

		// recalculate size after encryption
		dataSize = WRITE_BUFFER.position() - dataPos;

		WRITE_BUFFER.position(headerPos);
		
		// write header
		WRITE_BUFFER.putShort((short) (dataSize));
		WRITE_BUFFER.position(dataPos + dataSize);
	}

	final void closeConnection(final Connection<T> con) {
		synchronized (_pendingClose) {
			_pendingClose.addLast(con);
		}
	}

	public final void shutdown() {
		_shutdown = true;
	}

	final private void closeConnectionImpl(final SelectionKey key, final Connection<T> con) {
		try {
			// notify connection
			con.getClient().onDisconnection();
		} catch (Exception ex) {
			ex.printStackTrace();
			// ignore ,must catch Exception
		} finally {
			try {
				// close socket and the SocketChannel
				con.close();
			} catch (IOException e) {
				// _log.log(Level.SEVERE,"ignore, we are closing anyway.", e);
			} finally {
				con.releaseBuffers();
				// clear attachment
				key.attach(null);
				// cancel key
				key.cancel();
			}
		}
	}
}
